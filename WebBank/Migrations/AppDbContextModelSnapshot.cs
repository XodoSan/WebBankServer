// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebBank.Context;

#nullable disable

namespace WebBank.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebBank.Entities.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("WebBank.Entities.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AccountOpeningDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContributorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("RateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("ContributorId");

                    b.HasIndex("RateId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("WebBank.Entities.Contributor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("WebBank.Entities.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("RecipientBankAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderBankAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RecipientBankAccountId");

                    b.HasIndex("SenderBankAccountId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("WebBank.Entities.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("WebBank.Entities.BankAccount", b =>
                {
                    b.HasOne("WebBank.Entities.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebBank.Entities.Contributor", "Contributor")
                        .WithMany("BankAccounts")
                        .HasForeignKey("ContributorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebBank.Entities.Rate", "Rate")
                        .WithMany("BankAccounts")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Contributor");

                    b.Navigation("Rate");
                });

            modelBuilder.Entity("WebBank.Entities.Operation", b =>
                {
                    b.HasOne("WebBank.Entities.BankAccount", "RecipientBankAccount")
                        .WithMany("RecipientOperations")
                        .HasForeignKey("RecipientBankAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebBank.Entities.BankAccount", "SenderBankAccount")
                        .WithMany("SenderOperations")
                        .HasForeignKey("SenderBankAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RecipientBankAccount");

                    b.Navigation("SenderBankAccount");
                });

            modelBuilder.Entity("WebBank.Entities.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("WebBank.Entities.BankAccount", b =>
                {
                    b.Navigation("RecipientOperations");

                    b.Navigation("SenderOperations");
                });

            modelBuilder.Entity("WebBank.Entities.Contributor", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("WebBank.Entities.Rate", b =>
                {
                    b.Navigation("BankAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
